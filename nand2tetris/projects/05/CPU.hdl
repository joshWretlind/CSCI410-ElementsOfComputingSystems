// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, the ALU executes the inputted instruction according
 * to the Hack machine language specification, as follows. 
 * The D and A in the language specification refer to CPU-resident registers,
 * while M refers to the memory register addressed by A, i.e. to Memory[A].
 * The inM input holds the value of this register. If the current instruction 
 * needs to write a value to M, the value is placed in outM, the address 
 * of the target register is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset == 1, then the 
 * CPU jumps to address 0 (i.e. sets pc = 0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current program
                         // (reset == 1) or continue executing the current
                         // program (reset == 0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // RAM address (of M)
        pc[15];          // ROM address (of next instruction)

     PARTS:
	 Not(in = instruction[15], out = isA);
	 Not(in = isA, out = isC);
	 
	 And(a = instruction[4], b = isC, out = setDtoALU); //Should we set D to the output of the ALU?
	 And(a = instruction[5], b = isC, out = setAtoALU); //Should we set A to the output of the ALU?
	 
	 Mux16(a = instruction, b = ALU, out = Ashouldbe, sel = setAtoALU);
	 Or( a= setAtoALU, b = isA, out = Ain);//if it is a C inst and need to set A to the output, or if it's a A instruction, set A
	 
	 ARegister(in=Ashouldbe, load = Ain, out = A);
	 DRegister(in = ALU, load = setDtoALU, out = D);
	 
	 Or16(a = A, b = false, out[0..14] = addressM);
	 Mux16(a= A, b = inM, out = AM, sel = instruction[12]); //The a bit determines whether we deal with A/D or M
	 
	 ALU(x = D, y = AM, no = instruction[6], f = instruction[7], ny = instruction[8], zy = instruction[9], nx = instruction[10], zx = instruction[11], out = ALU, zr = zr, ng = ng);
	 
	 And(a = instruction[3], b = isC, out = writeM);
	 Or16( a = ALU, b = false, out = outM);
	 
	 Or( a = zr, b = ng, out = zeroOrNeg);
	 Not(in = zeroOrNeg, out = pos);
	 And(a=instruction[0], b = pos, out = jgt);
	 And(a = instruction[1], b = zr, out = jeq);
	 And(a = instruction[2], b = ng, out = jlt);
	 Or(a = jgt, b = jeq, out = jge);
	 Or(a = jlt, b = jeq, out = jle);
	 Or(a = jle, b = jgt, out = jmp); // if any of the three are true, we want to jump
	 
	 And(a = jmp, b = isC, out = canJmp);
	 Not(in = canJmp, out = incPrgm); // When we're not jumping, we wait to increment
	 
	 PC(in = A, inc = incPrgm, load = canJmp, reset = reset, out[0..14] = pc);
	 
}
