// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y–x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs.
 * Which function to compute is determined by 6 input bits 
 * denoted zx, nx, zy, ny, f, no.
 * The computed function's value is called "out".
 * In addition to computing out, the ALU computes two 
 * 1-bit outputs called zr and ng:
 * if out == 0, zr = 1; otherwise zr = 0;
 * If out < 0, ng = 1; otherwise ng = 0.
 * The 6-bit combinations (zx,nx,zy,ny,f,no) and 
 * their effect are documented in the book. 
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx  == 1) sets x = 0        // 16-bit constant
// if (nx  == 1) sets x = ~x       // bitwise "not"
// if (zy  == 1) sets y = 0        // 16-bit constant
// if (ny  == 1) sets y = ~y       // bitwise "not"
// if (f   == 1) sets out = x + y  // integer 2's-complement addition
// if (f   == 0) sets out = x & y  // bitwise And
// if (no  == 1) sets out = ~out   // bitwise Not
// if (out == 0) sets zr = 1
// if (out < 0)  sets ng = 1

  
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if f == 1) or out = x & y (if == 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
	
	Not16(in=x,out=xnot);
	Not16(in=y,out=ynot);
	Mux4Way16(sel[0]=nx,sel[1]=zx,a=x,b=xnot,c[0..15]=false,d[0..15]=true,out=xman);
	Mux4Way16(sel[0]=ny,sel[1]=zy,a=y,b=ynot,c[0..15]=false,d[0..15]=true,out=yman);
	
	And16(a=xman,b=yman,out=xyand);
	Add16(a=xman,b=yman,out=xyadd);
	Mux16(sel=f,a=xyand,b=xyadd,out=fsel);
	
	Not16(in=fsel,out=noto);
	Mux16(sel=no,a=fsel,b=noto,out=o1);
	And16(a[0..15] = true, b=o1, out=out); // Set o1 to out. Think masks.
	
	And16(a[0..15]=true,b=o1,out[0..7]=o07,out[8..15]=o815,out[15]=ng);
	
	Or8Way(in[0..7]=o07,out=zr1);
	Or8Way(in[0..7]=o815,out=zr2);
	Or(a=zr1,b=zr2,out=zrnot);
	Not(in=zrnot, out=zr);
}
